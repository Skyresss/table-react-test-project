{"version":3,"sources":["state/reducers/tableReducer.ts","state/reducers/index.ts","state/index.ts","state/store.ts","api/axios.ts","state/action-creators/index.ts","state/action-types/index.ts","hooks/use-actions.ts","hooks/use-typed-selector.ts","components/Dropdown.tsx","components/TableRow.tsx","components/PageButtons.tsx","components/FilterButton.tsx","components/Table.tsx","components/Input.tsx","components/UserCard.tsx","App.tsx","index.tsx"],"names":["initialTableState","users","id","firstName","lastName","email","phone","adress","streetAddress","city","state","zip","description","params","states","reducer","produce","action","type","ActionTypes","FETCH_USERS","payload","filteredUsers","FIND_USER","value","filter","user","toLowerCase","includes","FILTER_COLUMNS","sort","a","b","localeCompare","numeric","toString","reverse","FIND_USER_BY_ID","foundUserById","find","FIND_ALL_STATES","map","item","pos","indexOf","reducers","combineReducers","table","tableReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","api","axios","create","baseURL","fetchUsers","dispatch","get","response","data","filterUsers","filterColumns","findUserByID","findAllStates","useActions","useDispatch","useMemo","bindActionCreators","actionCreators","useTypedSelector","useSelector","Button","styled","button","DropdownContent","div","Wrapper","Dropdown","setCurrentPage","allStates","onClick","TableRow","showUser","ButtonsWrapper","PaginationButton","PageButtons","pagesCount","currentPage","previousLabel","nextLabel","pageCount","onPageChange","selected","console","log","containerClassName","previousLinkClassName","nextLinkClassName","disabledClassName","activeClassName","marginPagesDisplayed","pageRangeDisplayed","FilterButton","direction","setDirection","style","display","StyledTable","Table","useState","Math","ceil","length","slice","StyledInput","input","Input","inputFirstNameValue","setInputFirstNameValue","placeholder","onChange","e","target","UserCard","foundUsers","Div","App","showUserCard","setShowUserCard","useEffect","renderUsers","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.0297eccf.chunk.js","sourcesContent":["import { Action } from '../actions';\r\nimport { ActionTypes } from '../action-types';\r\nimport { User } from '../user';\r\nimport produce from 'immer';\r\n\r\ninterface tableState {\r\n  users: User[];\r\n  filteredUsers?: User[];\r\n  params: {\r\n    firstName: string;\r\n    state: string;\r\n  };\r\n  foundUserById?: User;\r\n  states: string[];\r\n}\r\n\r\nconst initialTableState = {\r\n  users: [\r\n    {\r\n      id: 1821231231,\r\n      firstName: 'Aisha',\r\n      lastName: 'Hagan',\r\n      email: 'RRichard@vitae.io',\r\n      phone: '(319)201-9102',\r\n      adress: {\r\n        streetAddress: '852 Lectus Ln',\r\n        city: 'Rosenberg',\r\n        state: 'ND',\r\n        zip: '79157',\r\n      },\r\n      description: '{lorem|32',\r\n    },\r\n  ],\r\n  params: {\r\n    firstName: '',\r\n    state: 'All',\r\n  },\r\n  states: [],\r\n};\r\nconst reducer = produce(\r\n  (state: tableState = initialTableState, action: Action) => {\r\n    switch (action.type) {\r\n      case ActionTypes.FETCH_USERS:\r\n        state.users = action.payload;\r\n        state.filteredUsers = state.users;\r\n        return state;\r\n      case ActionTypes.FIND_USER:\r\n        state.params[action.payload.type] = action.payload.value;\r\n        state.filteredUsers = state.users\r\n          .filter(\r\n            (user) =>\r\n              state.params.firstName === '' ||\r\n              user.firstName\r\n                .toLowerCase()\r\n                .includes(state.params.firstName.toLowerCase())\r\n          )\r\n          .filter(\r\n            (user) =>\r\n              state.params.state === 'All' ||\r\n              user.adress.state === state.params.state\r\n          );\r\n\r\n        return state;\r\n      case ActionTypes.FILTER_COLUMNS:\r\n        if (action.payload.type === 'ascending') {\r\n          state.filteredUsers!.sort((a, b) =>\r\n            action.payload.value === 'state'\r\n              ? a.adress[action.payload.value].localeCompare(\r\n                  b.adress[action.payload.value],\r\n                  'en',\r\n                  {\r\n                    numeric: true,\r\n                  }\r\n                )\r\n              : a[action.payload.value]\r\n                  .toString()\r\n                  .localeCompare(b[action.payload.value].toString(), 'en', {\r\n                    numeric: true,\r\n                  })\r\n          );\r\n        } else {\r\n          state.filteredUsers = state\r\n            .filteredUsers!.sort((a, b) =>\r\n              action.payload.value === 'state'\r\n                ? a.adress[action.payload.value].localeCompare(\r\n                    b.adress[action.payload.value],\r\n                    'en',\r\n                    {\r\n                      numeric: true,\r\n                    }\r\n                  )\r\n                : a[action.payload.value]\r\n                    .toString()\r\n                    .localeCompare(b[action.payload.value].toString(), 'en', {\r\n                      numeric: true,\r\n                    })\r\n            )\r\n            .reverse();\r\n        }\r\n        return state;\r\n      case ActionTypes.FIND_USER_BY_ID:\r\n        state.foundUserById = state.users.find(\r\n          (user) =>\r\n            user.id === action.payload.id &&\r\n            user.firstName === action.payload.firstName\r\n        );\r\n        return state;\r\n      case ActionTypes.FIND_ALL_STATES:\r\n        state.states = state.users.map((user) => user.adress.state);\r\n        state.states = state.states.filter(function (item, pos) {\r\n          return state.states.indexOf(item) == pos;\r\n        });\r\n        return state;\r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n);\r\n\r\nexport default reducer;\r\n","import { combineReducers } from 'redux';\r\nimport tableReducer from './tableReducer';\r\nconst reducers = combineReducers({\r\n  table: tableReducer,\r\n});\r\n\r\nexport default reducers;\r\nexport type RootState = ReturnType<typeof reducers>;\r\n","export * from './store';\r\nexport * from './reducers';\r\nexport * from './user';\r\nexport * as actionCreators from './action-creators';","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport reducers from './reducers';\r\n\r\nexport const store = createStore(\r\n  reducers,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n","import axios from \"axios\";\r\n\r\n\r\n  const api = axios.create({\r\n    baseURL: 'https://itrex-react-lab-files.s3.eu-central-1.amazonaws.com/react-test-api.json'\r\n  });\r\n  \r\n  export default api","import { Dispatch } from 'redux';\r\nimport api from '../../api/axios';\r\nimport { ActionTypes } from '../action-types';\r\nimport { Action } from '../actions';\r\n\r\nexport const fetchUsers = () => async (dispatch: Dispatch<Action>) => {\r\n  const response = await api.get('');\r\n  return dispatch({\r\n    type: ActionTypes.FETCH_USERS,\r\n    payload: response.data,\r\n  });\r\n};\r\ntype test = 'firstName' | 'state';\r\nexport const filterUsers = (value: string, type: test) => {\r\n  return {\r\n    type: ActionTypes.FIND_USER,\r\n    payload: {\r\n      value,\r\n      type,\r\n    },\r\n  };\r\n};\r\nexport const filterColumns = (\r\n  type: 'ascending' | 'descending',\r\n  value: 'id' | 'firstName' | 'lastName' | 'phone' | 'state' | 'email'\r\n) => {\r\n  return {\r\n    type: ActionTypes.FILTER_COLUMNS,\r\n    payload: {\r\n      type,\r\n      value,\r\n    },\r\n  };\r\n};\r\nexport const findUserByID = (id: number, firstName: string) => {\r\n  return {\r\n    type: ActionTypes.FIND_USER_BY_ID,\r\n    payload: {\r\n      id,\r\n      firstName,\r\n    },\r\n  };\r\n};\r\nexport const findAllStates = () => {\r\n  return {\r\n    type: ActionTypes.FIND_ALL_STATES\r\n  }\r\n}","export enum ActionTypes {\r\n  FIND_USER = 'find_user',\r\n  FETCH_USERS = 'fetch_users',\r\n  FILTER_COLUMNS = 'filter_columns',\r\n  FIND_USER_BY_ID = 'find_user_by_id',\r\n  FIND_ALL_STATES ='find_all_states'\r\n}\r\n","import { useMemo } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { actionCreators } from '../state';\r\n\r\nexport const useActions = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  return useMemo(() => {\r\n    return bindActionCreators(actionCreators, dispatch);\r\n  }, [dispatch]);\r\n};\r\n","import { useSelector, TypedUseSelectorHook } from 'react-redux';\r\nimport { RootState } from '../state';\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import styled from 'styled-components';\r\nimport { useActions } from '../hooks/use-actions';\r\nimport { useTypedSelector } from '../hooks/use-typed-selector';\r\nconst Button = styled.button`\r\n  background-color: #009879;\r\n  color: white;\r\n  padding: 16px;\r\n  font-size: 16px;\r\n  border: none;\r\n  width: 135px;\r\n`;\r\nconst DropdownContent = styled.div`\r\n  display: none;\r\n  position: absolute;\r\n  background-color: #009879;\r\n  width: 135px;\r\n  z-index: 20;\r\n  button:hover {\r\n    background-color: #ddd;\r\n  }\r\n`;\r\nconst Wrapper = styled.div`\r\n  width: 135px;\r\n  position: relative;\r\n  display: inline-block;\r\n  &:hover ${DropdownContent} {\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n`;\r\ninterface DropdownProps {\r\n  setCurrentPage: (arg: number) => void;\r\n}\r\nconst Dropdown: React.FC<DropdownProps> = ({ setCurrentPage }) => {\r\n  const { filterUsers } = useActions();\r\n  const allStates = useTypedSelector(({ table }) => table!.states);\r\n  return (\r\n    <Wrapper>\r\n      <Button>Filter by state</Button>\r\n\r\n      <DropdownContent>\r\n        <Button\r\n          onClick={() => filterUsers('All', 'state') && setCurrentPage(1)}\r\n        >\r\n          All\r\n        </Button>\r\n        {allStates.map((state) => {\r\n          return (\r\n            <Button\r\n              onClick={() => filterUsers(state, 'state') && setCurrentPage(1)}\r\n            >\r\n              {state}\r\n            </Button>\r\n          );\r\n        })}\r\n      </DropdownContent>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Dropdown;\r\n","import { useActions } from '../hooks/use-actions';\r\nimport { User } from '../state/user';\r\ninterface TableRowProps {\r\n  user: User;\r\n  showUser: (arg:boolean) => void;\r\n}\r\n\r\nconst TableRow: React.FC<TableRowProps> = ({ user,showUser }) => {\r\n  const {findUserByID} = useActions();\r\n  return (\r\n    <tr onClick={() => findUserByID(user.id, user.firstName) && showUser(true)} >\r\n      <td>{user.id}</td>\r\n      <td>{user.firstName}</td>\r\n      <td>{user.lastName}</td>\r\n      <td>{user.email}</td>\r\n      <td>{user.phone}</td>\r\n      <td>{user.adress.state}</td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default TableRow;\r\n","import styled from 'styled-components';\r\nimport ReactPaginate from 'react-paginate';\r\nconst ButtonsWrapper = styled.div`\r\ndisplay: flex;\r\njustify-content end;\r\n`;\r\nconst PaginationButton = styled.div`\r\n  .paginationBttns {\r\n    width: 80%;\r\n    height: 40px;\r\n    list-style: none;\r\n    display: flex;\r\n    justify-content: center;\r\n  }\r\n\r\n  .paginationBttns a {\r\n    border: 0;\r\n    text-align: center;\r\n    display: inline-block;\r\n    padding: 14px;\r\n    width: 50px;\r\n    margin: 3px;\r\n    color: #ffffff;\r\n    background-color: #009879;\r\n    border-radius: 8px;\r\n    font-family: 'proxima-nova-soft', sans-serif;\r\n    font-weight: 600;\r\n    text-decoration: none;\r\n    transition: box-shadow 200ms ease-out;\r\n    cursor: pointer;\r\n  }\r\n\r\n  .paginationBttns a:hover {\r\n    color: white;\r\n    background-color: #ddd;\r\n  }\r\n\r\n  .paginationActive a {\r\n    color: white;\r\n    background-color: #ddd;\r\n  }\r\n\r\n  .paginationDisabled a {\r\n    display: none;\r\n  }\r\n  .previousBttn {\r\n    height: 14px !important;\r\n    width: 80px !important;\r\n    color: #009879 !important;\r\n    background-color: white !important;\r\n    text-decoration: none !important;\r\n    transition: box-shadow 200ms ease-out !important;\r\n    border: 2px solid #009879 !important;\r\n  }\r\n`;\r\ninterface PageButtonsProps {\r\n  setCurrentPage: (value: number) => void;\r\n  currentPage: number;\r\n  pagesCount: number;\r\n}\r\nconst PageButtons: React.FC<PageButtonsProps> = ({\r\n  setCurrentPage,\r\n  pagesCount,\r\n  currentPage,\r\n}) => {\r\n  const onPageChange = ({ selected }: { selected: number }) => {\r\n    console.log(selected + 1);\r\n    setCurrentPage(selected + 1);\r\n    console.log(selected + 1);\r\n  };\r\n  return (\r\n    <ButtonsWrapper>\r\n      <PaginationButton>\r\n        <ReactPaginate\r\n          previousLabel={'Previous'}\r\n          nextLabel={'Next'}\r\n          pageCount={pagesCount}\r\n          onPageChange={onPageChange}\r\n          containerClassName={'paginationBttns'}\r\n          previousLinkClassName={'previousBttn'}\r\n          nextLinkClassName={'previousBttn'}\r\n          disabledClassName={'paginationDisabled'}\r\n          activeClassName={'paginationActive'}\r\n          marginPagesDisplayed={1}\r\n          pageRangeDisplayed={2}\r\n        />\r\n      </PaginationButton>\r\n    </ButtonsWrapper>\r\n  );\r\n};\r\nexport default PageButtons;\r\n","import { useActions } from '../hooks/use-actions';\r\nimport { FaAngleUp, FaAngleDown } from 'react-icons/fa';\r\ninterface FilterButtonProps {\r\n  value: 'firstName' | 'state' | 'id' | 'lastName' | 'phone' | 'email';\r\n  direction: 'ascending' | 'descending';\r\n  setDirection: (arg: 'ascending' | 'descending') => void;\r\n}\r\n\r\nconst FilterButton: React.FC<FilterButtonProps> = ({\r\n  value,\r\n  direction,\r\n  setDirection,\r\n}) => {\r\n  const { filterColumns } = useActions();\r\n  return (\r\n    <div style={{ display: 'inline' }}>\r\n      {direction === 'ascending' ? (\r\n        <FaAngleUp\r\n          onClick={() => {\r\n            filterColumns(direction, value);\r\n            direction === 'ascending'\r\n              ? setDirection('descending')\r\n              : setDirection('ascending');\r\n          }}\r\n        />\r\n      ) : (\r\n        <FaAngleDown\r\n          onClick={() => {\r\n            filterColumns(direction, value);\r\n            direction === 'descending'\r\n              ? setDirection('ascending')\r\n              : setDirection('descending');\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FilterButton;\r\n","import { useMemo, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useTypedSelector } from '../hooks/use-typed-selector';\r\nimport TableRow from './TableRow';\r\nimport PageButtons from './PageButtons';\r\nimport FilterButton from './FilterButton';\r\nconst StyledTable = styled.table`\r\n  border-collapse: collapse;\r\n  margin: 25px 0;\r\n  font-size: 0.9em;\r\n  font-family: sans-serif;\r\n  width: 100%;\r\n  box-shadow: 0 0 20px rgba(0, 0, 0, 0.15);\r\n  & tbody tr {\r\n    border-bottom: 1px solid #dddddd;\r\n  }\r\n  & th {\r\n    text-align: center;\r\n  }\r\n  & tbody td {\r\n    text-align: center;\r\n  }\r\n  & tbody tr:nth-of-type(even) {\r\n    background-color: #f3f3f3;\r\n  }\r\n  & tbody tr:last-of-type {\r\n    border-bottom: 2px solid #009879;\r\n  }\r\n  & tbody tr:hover {\r\n    color: #009879;\r\n  }\r\n  & thead tr {\r\n    background-color: #009879;\r\n    color: #ffffff;\r\n  }\r\n  & th td {\r\n    padding: 12px 15px;\r\n  }\r\n  & tr {\r\n    height: 50px;\r\n  }\r\n`;\r\ninterface TableProps {\r\n  showUser: (arg: boolean) => void;\r\n  setCurrentPage: (arg: number) => void;\r\n  currentPage: number;\r\n}\r\nconst Table: React.FC<TableProps> = ({\r\n  showUser,\r\n  setCurrentPage,\r\n  currentPage,\r\n}) => {\r\n  const users = useTypedSelector(({ table }) => table?.filteredUsers);\r\n\r\n  const [direction, setDirection] = useState<'ascending' | 'descending'>(\r\n    'ascending'\r\n  );\r\n\r\n  const pagesCount = useMemo(\r\n    () => Math.ceil(users ? users.length / 20 : 1),\r\n    [users]\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <StyledTable>\r\n        <thead>\r\n          <tr>\r\n            <th>\r\n              ID\r\n              <FilterButton\r\n                value={'id'}\r\n                direction={direction}\r\n                setDirection={setDirection}\r\n              />\r\n            </th>\r\n\r\n            <th>\r\n              First Name\r\n              <FilterButton\r\n                value={'firstName'}\r\n                direction={direction}\r\n                setDirection={setDirection}\r\n              />\r\n            </th>\r\n            <th>\r\n              Last Name\r\n              <FilterButton\r\n                value={'lastName'}\r\n                direction={direction}\r\n                setDirection={setDirection}\r\n              />\r\n            </th>\r\n            <th>\r\n              Email\r\n              <FilterButton\r\n                value={'email'}\r\n                direction={direction}\r\n                setDirection={setDirection}\r\n              />\r\n            </th>\r\n            <th>\r\n              Phone\r\n              <FilterButton\r\n                value={'phone'}\r\n                direction={direction}\r\n                setDirection={setDirection}\r\n              />\r\n            </th>\r\n            <th>\r\n              State\r\n              <FilterButton\r\n                value={'state'}\r\n                direction={direction}\r\n                setDirection={setDirection}\r\n              />\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {users &&\r\n            users\r\n              .slice((currentPage - 1) * 20, currentPage * 20)\r\n              .map((user) => (\r\n                <TableRow\r\n                  key={user.firstName + user.lastName + user.id}\r\n                  user={user}\r\n                  showUser={showUser}\r\n                />\r\n              ))}\r\n        </tbody>\r\n      </StyledTable>\r\n      {pagesCount > 1 && (\r\n        <PageButtons\r\n          pagesCount={pagesCount}\r\n          currentPage={currentPage}\r\n          setCurrentPage={setCurrentPage}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default Table;\r\n","import styled from 'styled-components';\r\nimport { useState } from 'react';\r\nimport { useActions } from '../hooks/use-actions';\r\nconst StyledInput = styled.input`\r\n  border-radius: 10px;\r\n  border: 2px solid #009879;\r\n  font-size: 1.3em;\r\n  background: none;\r\n  box-shadow: none;\r\n  outline: none;\r\n`;\r\ninterface InputProps {\r\n  setCurrentPage: (arg: number) => void;\r\n}\r\nconst Input: React.FC<InputProps> = ({setCurrentPage}) => {\r\n  const { filterUsers } = useActions();\r\n  const [inputFirstNameValue, setInputFirstNameValue] = useState('');\r\n  const inputHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    filterUsers(e.target.value,'firstName');\r\n    setInputFirstNameValue(e.target.value);\r\n    setCurrentPage(1)\r\n  };\r\n\r\n  return (\r\n    <StyledInput\r\n      placeholder=\"Enter First Name\"\r\n      value={inputFirstNameValue}\r\n      onChange={inputHandler}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import styled from 'styled-components';\r\nimport { useTypedSelector } from '../hooks/use-typed-selector';\r\n\r\nconst Wrapper = styled.div`\r\n  margin: 36px auto;\r\n  max-width: 100%;\r\n  border-radius: 20px;\r\n  box-shadow: 0 4px 10px rgb(0 0 0 / 25%);\r\n  width: 60%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 0.9em;\r\n  font-family: sans-serif;\r\n  border: 2px solid #009879;\r\n`;\r\nconst UserCard: React.FC = () => {\r\n  const foundUsers = useTypedSelector(({ table }) => table!.foundUserById);\r\n\r\n  return (\r\n    <Wrapper>\r\n      <h1>Profile Info:</h1>\r\n      <p>Selected Profile: {foundUsers!.firstName}</p>\r\n      <p>Description: {foundUsers!.description}</p>\r\n      <p>Address: {foundUsers!.adress.streetAddress}</p>\r\n      <p>City: {foundUsers!.adress.city}</p>\r\n      <p>State: {foundUsers!.adress.state}</p>\r\n      <p>Index: {foundUsers!.adress.zip}</p>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default UserCard;\r\n","import { useEffect, useState } from 'react';\r\nimport { useActions } from './hooks/use-actions';\r\nimport styled from 'styled-components';\r\nimport Dropdown from './components/Dropdown';\r\nimport Table from './components/Table';\r\nimport Input from './components/Input';\r\nimport UserCard from './components/UserCard';\r\n\r\nconst Div = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n`;\r\nconst Wrapper = styled.div`\r\n  padding: 30px 50px;\r\n`;\r\nconst App: React.FC = () => {\r\n  const [showUserCard, setShowUserCard] = useState(false);\r\n  const { fetchUsers, findAllStates } = useActions();\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  useEffect(() => {\r\n    const renderUsers = async () => {\r\n      await fetchUsers();\r\n      await findAllStates();\r\n    };\r\n    renderUsers();\r\n  }, []);\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Div>\r\n        <Input setCurrentPage={ setCurrentPage}/>\r\n        <Dropdown setCurrentPage={ setCurrentPage}/>\r\n      </Div>\r\n      <Table setCurrentPage={setCurrentPage} currentPage={ currentPage} showUser={setShowUserCard} />\r\n      {showUserCard && <UserCard />}\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './state';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.querySelector('#root')\r\n);\r\n"],"sourceRoot":""}